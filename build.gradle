plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.0'
}

sourceCompatibility = '22'
targetCompatibility = '22'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'org.example.gradleandrew'
    mainClass = 'org.example.gradleandrew.HelloApplication'
}

javafx {
    version = '22-ea+11'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.swing']
}

dependencies {
    implementation('org.controlsfx:controlsfx:11.1.2')
    implementation('com.dlsc.formsfx:formsfx-core:11.6.0') {
        exclude(group: 'org.openjfx')
    }
    implementation('net.synedra:validatorfx:0.4.0') {
        exclude(group: 'org.openjfx')
    }
    implementation('eu.hansolo:tilesfx:11.48') {
        exclude(group: 'org.openjfx')
    }

    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    testImplementation("org.seleniumhq.selenium:selenium-java:4.36.0")
    // https://mvnrepository.com/artifact/io.rest-assured/rest-assured
    testImplementation("io.rest-assured:rest-assured:5.5.6")
    testImplementation("com.fasterxml.jackson.core:jackson-databind:2.17.2")
    testImplementation("org.junit.jupiter:junit-jupiter:5.10.0")
    // Allure для JUnit 5
    testImplementation("io.qameta.allure:allure-junit5:2.29.0")
// WebDriverManager — автоматическая загрузка драйверов (ChromeDriver, GeckoDriver и т.д.)
    testImplementation("io.github.bonigarcia:webdrivermanager:5.9.2")
    // (Опционально) Allure для RestAssured — автоматически логирует запросы/ответы в отчёт
    testImplementation("io.qameta.allure:allure-rest-assured:2.29.0")
}

test {
    useJUnitPlatform()
}

test {
    useJUnitPlatform()

    // Включить слушатель Allure для JUnit 5
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}
jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}